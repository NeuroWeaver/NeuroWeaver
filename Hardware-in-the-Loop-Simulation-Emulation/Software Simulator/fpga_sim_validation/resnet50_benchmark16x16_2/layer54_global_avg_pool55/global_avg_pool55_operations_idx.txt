// CODELET:	global_avg_pool55
inputs=data['N', 'IH', 'IW', 'C']
intermediates=zero['SIMD_SIZE'], denom['SIMD_SIZE']
outputs=out['N', 'OH', 'OW', 'C']
0	config0: start-SIMD
1	config1: start-IMM
2	config2: start-IMM
3	(OH)loop0[0]: START=0; STOP=1; STRIDE=1; OFFSET:0
4		(OW)loop1[1]: START=0; STOP=1; STRIDE=1; OFFSET:0
5			(IH)loop2[2]: START=0; STOP=7; STRIDE=7; OFFSET:0
6				(IW)loop3[3]: START=0; STOP=7; STRIDE=7; OFFSET:0
7					(N)loop4[4]: START=0; STOP=1; STRIDE=1; OFFSET:0
8						(C)loop5[5]: START=0; STOP=2048; STRIDE=256; OFFSET:0
9							transfer1: OPERAND: out[DRAM->VMEM2], SIZES: [[1, 1, 1, 2048], [1, 1, 1, 256]]
10							transfer0: OPERAND: data[DRAM->VMEM1], SIZES: [[1, 7, 7, 2048], [1, 7, 7, 256]]
11							(OH)loop6[6]: START=0; STOP=1; STRIDE=1; OFFSET:0
12								(OW)loop7[7]: START=0; STOP=1; STRIDE=1; OFFSET:0
13									(IH)loop8[8]: START=0; STOP=7; STRIDE=1; OFFSET:0
14										(IW)loop9[9]: START=0; STOP=7; STRIDE=1; OFFSET:0
15											(N)loop10[10]: START=0; STOP=1; STRIDE=1; OFFSET:0
16												(C)loop11[11]: START=0; STOP=256; STRIDE=1; OFFSET:0
17													compute0: SIMD-ADD(['data', 'out'])->['out']
18													compute1: SIMD-MUL(['out', 'denom'])->['out']
19												loop11: END
20											loop10: END
21										loop9: END
22									loop8: END
23								loop7: END
24							loop6: END
25						loop5: END
26					loop4: END
27					transfer2: OPERAND: out[VMEM2->DRAM], SIZES: [[1, 1, 1, 256], [1, 1, 1, 2048]]
28				loop3: END
29			loop2: END
30		loop1: END
31	loop0: END
32	config3: end-SIMD
